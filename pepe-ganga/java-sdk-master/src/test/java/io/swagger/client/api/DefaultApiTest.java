/*
 * MercadoLibre API
 * MercadoLibre API Documentation.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.Configuration;
import io.swagger.client.model.*;
import org.junit.Ignore;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    /**
     * To run tests replace all the corresponding null values for valid values
     **/

    private final Long clientId = null;
    private final String clientSecret = null;
    private final String redirectUri = null;
    private final String accessToken = null;
    private final DefaultApi api = new DefaultApi();


    /**
     * Returns auth Url
     */
    @Test
    public void getAuthUrlTest() throws ApiException {
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        String response = api.getAuthUrl(redirectUri, Configuration.AuthUrls.MLA);
        StringBuilder sb = new StringBuilder();
        sb.append(Configuration.AuthUrls.MLA.getValue());
        sb.append("/authorization?response_type=code&client_id=");
        sb.append(clientId);
        sb.append("&redirect_uri=");
        try {
            sb.append(URLEncoder.encode(redirectUri, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            sb.append(redirectUri);
        }
        assertNotNull(response);
        assertEquals(sb.toString(), response);
    }

    @Test(expected = ApiException.class)
    public void getAuthUrlTestFailsIfRedirectUriIsNull() throws ApiException {
        String redirectUri = null;
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        api.getAuthUrl(redirectUri, Configuration.AuthUrls.MLA);
        StringBuilder sb = new StringBuilder();
        sb.append(Configuration.AuthUrls.MLA.getValue());
        sb.append("/authorization?response_type=code&client_id=");
        sb.append(clientId);
        sb.append("&redirect_uri=");
        try {
            sb.append(URLEncoder.encode(redirectUri, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            sb.append(redirectUri);
        }
    }

    /**
     * Returns access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeTest() throws ApiException {
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        String code = "";
        AccessToken response = api.authorize(code, redirectUri);
        assertNotNull(response);
        assertNotNull(response.getAccess_token());
        assertEquals("bearer", response.getToken_type());
    }

    @Test(expected = ApiException.class)
    public void authorizeTestFailsIfCodeIsNull() throws ApiException {
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        String code = null;
        api.authorize(code, redirectUri);
    }

    @Test(expected = ApiException.class)
    public void authorizeTestFailsIfCodeIsInvalid() throws ApiException {
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        String code = "12321321";
        api.authorize(code, redirectUri);
    }

    /**
     * Returns refresh token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshTokenTest() throws ApiException {
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        String refreshToken = "";
        RefreshToken response = api.refreshAccessToken(refreshToken);
        assertNotNull(response);
        assertNotNull(response.getAccess_token());
        assertEquals("bearer", response.getToken_type());
    }

    @Test(expected = ApiException.class)
    public void refreshTokenTestFailsIfRefreshTokenIsInvalid() throws ApiException {
        DefaultApi api = new DefaultApi(new ApiClient(), clientId, clientSecret);
        String refreshToken = "1232131";
        api.refreshAccessToken(refreshToken);
    }

    /**
     * Returns response from any specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultGetTest() throws ApiException {
        String resource = "currencies";
        Object response = api.defaultGet(resource);
        assertNotNull(response);
    }

    @Test(expected = ApiException.class)
    public void defaultGetTestFailsIfResourceIsInvalid() throws ApiException {
        String resource = "test123";
        api.defaultGet(resource);
    }

    /**
     * Make a POST to any resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPostTest() throws ApiException {
        String resource = "items";
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        Object response = api.defaultPost(accessToken, resource, body);
        assertNotNull(response);
    }


    @Test(expected = ApiException.class)
    public void defaultPostTestFailsIfBodyIsInvalid() throws ApiException {
        String resource = "items";
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        api.defaultPost(accessToken, resource, body);
    }

    @Test(expected = ApiException.class)
    public void defaultPostTestFailsIfResourceIsInvalid() throws ApiException {
        String resource = "123test";
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        api.defaultPost(accessToken, resource, body);
    }

    @Test(expected = ApiException.class)
    public void defaultPostTestFailsIfAccessTokenIsNull() throws ApiException {
        String accessToken = null;
        String resource = "items";
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        api.defaultPost(accessToken, resource, body);
    }

    /**
     * Update an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPutTest() throws ApiException {
        String id = "MLA742781879";
        String resource = "items";
        ItemJson body = new ItemJson();
        body.price(100);
        Object response = api.defaultPut(resource, id, accessToken, body);
        assertNotNull(response);
    }

    @Test(expected = ApiException.class)
    public void defaultPutTestFailsIfIdIsNull() throws ApiException {
        String id = null;
        String resource = "items";
        ItemJson body = new ItemJson();
        body.price(100);
        api.defaultPut(resource, id, accessToken, body);
    }

    @Test(expected = ApiException.class)
    public void defaultPutTestFailsIfBodyIsNull() throws ApiException {
        String id = "MLA123456";
        String resource = "items";
        ItemJson body = null;
        api.defaultPut(resource, id, accessToken, body);
    }

    /**
     * Delete an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultDeleteTest() throws ApiException {
        String id = "MLA123456";
        String resource = "users/me/bookmarks";
        Object response = api.defaultDelete(resource, id, accessToken);
        assertNotNull(response);
    }

    @Test(expected = ApiException.class)
    public void defaultDeleteTestFailsIfIdIsNull() throws ApiException {
        String id = null;
        String resource = "questions";
        api.defaultDelete(resource, id, accessToken);
    }

    @Test(expected = ApiException.class)
    public void defaultDeleteTestFailsIfMethodNotAuthorized() throws ApiException {
        String id = "MLA742781879";
        String resource = "items";
        api.defaultDelete(resource, id, accessToken);
    }

    /**
     * Returns information about a category.
     *
     * @throws ApiException if the Api call fails
     */

    @Test
    public void categoriesCategoryIdGetTest() throws ApiException {
        String categoryId = "MLA3530";
        CategoryResponse response = api.categoriesCategoryIdGet(categoryId);
        assertNotNull(response);
        assertEquals(categoryId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void categoriesCategoryIdGetTestFailsIfCategoryIsInvalid() throws ApiException {
        String categoryId = "MLA123";
        api.categoriesCategoryIdGet(categoryId);
    }

    /**
     * Return item infromation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsItemIdGetTest() throws ApiException {
        String itemId = "MLA742781879";
        ItemResponse response = api.itemsItemIdGet(itemId, accessToken);
        assertNotNull(response);
        assertEquals(itemId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void itemsItemIdGetTestFailsIfItemIdIsInvalid() throws ApiException {
        String itemId = "MLA12321";
        api.itemsItemIdGet(itemId, accessToken);
    }

    /**
     * Update an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsItemIdPutTest() throws ApiException {
        String itemId = "MLA742781879";
        ItemJson body = new ItemJson();
        body.price(10);
        ItemResponse response = api.itemsItemIdPut(itemId, accessToken, body);
        assertNotNull(response);
        assertEquals(itemId, response.getId());
        assertEquals(body.getPrice(), response.getPrice());
    }

    @Test(expected = ApiException.class)
    public void itemsItemIdPutTestFailsIfItemIdInvalid() throws ApiException {
        String itemId = null;
        ItemJson body = new ItemJson();
        body.price(100);
        api.itemsItemIdPut(itemId, accessToken, body);
    }

    @Test(expected = ApiException.class)
    public void itemsItemIdPutTestFailsIfFieldCantBeUpdated() throws ApiException {
        String itemId = "null";
        ItemJson body = new ItemJson();
        body.categoryId("MLA123");
        api.itemsItemIdPut(itemId, accessToken, body);
    }

    @Test(expected = ApiException.class)
    public void itemsItemIdPutTestFailsIfAccessTokenNull() throws ApiException {
        String accessToken = null;
        String itemId = "MLA742781879";
        ItemJson body = new ItemJson();
        body.price(100);
        api.itemsItemIdPut(itemId, accessToken, body);
    }

    /**
     * List an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsPostTest() throws ApiException {
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        ItemResponse response = api.itemsPost(accessToken, body);
        assertNotNull(response);
        assertEquals(body.getTitle().toLowerCase(), (response.getTitle().toLowerCase()));
        assertEquals(body.getSiteId(), response.getSiteId());
        assertEquals(body.getPrice(), response.getPrice());
        assertEquals(body.getCategoryId(), response.getCategoryId());
    }

    @Test(expected = ApiException.class)
    public void itemsPostTestFailsIfBodyIsInvalid() throws ApiException {
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        api.itemsPost(accessToken, body);
    }


    @Test(expected = ApiException.class)
    public void itemsPostTestFailsIfAcccessTokenIsNull() throws ApiException {
        String accessToken = null;
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        api.itemsPost(accessToken, body);
    }

    /**
     * Validate the JSON before listing an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsValidatePostTest() throws ApiException {
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        Object response = api.itemsValidatePost(accessToken, body);
        assertNull(response);
    }


    @Test(expected = ApiException.class)
    public void itemsValidatePostTestFailsIfBodyIsInvalid() throws ApiException {
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        api.itemsValidatePost(accessToken, body);
    }

    /**
     * Get an order by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersOrderIdGetTest() throws ApiException {
        Integer orderId = 123456;
        Object response = api.ordersOrderIdGet(accessToken, orderId);
        assertNotNull(response);
    }

    @Test(expected = ApiException.class)
    public void ordersOrderIdGetTestFailsIfOrderIdIsInvalid() throws ApiException {
        Integer orderId = 123;
        api.ordersOrderIdGet(accessToken, orderId);
    }

    @Test(expected = ApiException.class)
    public void ordersOrderIdGetTestFailsIfAccessTokenIsInvalid() throws ApiException {
        Integer orderId = 123456;
        String accessToken = "123ABC";
        api.ordersOrderIdGet(accessToken, orderId);
    }

    /**
     * Search orders by seller or buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersSearchGetTest() throws ApiException {
        Integer buyer = 345247525;
        Integer seller = null;
        Integer offset = null;
        Integer limit = null;
        Object response = api.ordersSearchGet(accessToken, buyer, seller, offset, limit);
        assertNotNull(response);
    }

    @Test(expected = ApiException.class)
    public void ordersSearchGetTestFailsIfAccessTokenIsInvalid() throws ApiException {
        String accessToken = "123ABC";
        Integer buyer = 345247525;
        Integer seller = null;
        Integer offset = null;
        Integer limit = null;
        api.ordersSearchGet(accessToken, buyer, seller, offset, limit);
    }

    @Test(expected = ApiException.class)
    public void ordersSearchGetTestFailsIfAllParamsAreNull() throws ApiException {
        Integer buyer = null;
        Integer seller = null;
        Integer offset = null;
        Integer limit = null;
        api.ordersSearchGet(accessToken, buyer, seller, offset, limit);
    }

    /**
     * Retrieves all data to make a delivery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipmentsShipmentIdGetTest() throws ApiException {
        Long shipmentId = 123L;
        Shipment response = api.shipmentsShipmentIdGet(accessToken, shipmentId);
        assertNotNull(response);
        assertEquals(shipmentId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void shipmentsShipmentIdGetTestFailsIfShipmentIdIsInvalid() throws ApiException {
        Long shipmentId = 1234L;
        Shipment response = api.shipmentsShipmentIdGet(accessToken, shipmentId);
        assertNotNull(response);
        assertEquals(shipmentId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void shipmentsShipmentIdGetTestFailsIfAccessTokenIsInvalid() throws ApiException {
        String accessToken = "123ABC";
        Long shipmentId = 123L;
        Shipment response = api.shipmentsShipmentIdGet(accessToken, shipmentId);
        assertNotNull(response);
        assertEquals(shipmentId, response.getId());
    }

    /**
     * Return all sites where MercadoLibre operates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetTest() throws ApiException {
        Sites response = api.sitesGet();
        assertNotNull(response);
        assertNotNull(response.get(0).getId());
        assertNotNull(response.get(0).getName());
    }

    /**
     * Predict category by title.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSiteIdCategoryPredictorPredictGetTest() throws ApiException {
        String siteId = "MLA";
        String title = "Ipod Touch 6 32GB";
        CategoryPrediction response = api.sitesSiteIdCategoryPredictorPredictGet(siteId, title);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getName());
        assertNotNull(response.getPredictionProbability());
    }

    /**
     * Return information about a site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSiteIdGetTest() throws ApiException {
        String siteId = "MLA";
        Site response = api.sitesSiteIdGet(siteId);
        assertNotNull(response);
        assertEquals(siteId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void sitesSiteIdGetTestFailsIfSiteIdIsInvalid() throws ApiException {
        String siteId = "M2A";
        api.sitesSiteIdGet(siteId);
    }

    /**
     * Return account information about the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersMeGetTest() throws ApiException {
        Integer userId = 345247525;
        UserResponse response = api.usersMeGet(accessToken);
        assertNotNull(response);
        assertEquals(userId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void usersMeGetTestFailsIfAccessTokenIsInvalid() throws ApiException {
        api.usersMeGet(accessToken);
    }

    /**
     * Return user account information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        Integer userId = 345247525;
        UserResponse response = api.usersUserIdGet(userId, accessToken);
        assertNotNull(response);
        assertEquals(userId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void usersUserIdGetTestFailsIfUserIsInvalid() throws ApiException {
        Integer userId = 12345;
        UserResponse response = api.usersUserIdGet(userId, accessToken);
        assertNotNull(response);
        assertEquals(userId, response.getId());
    }

    @Test(expected = ApiException.class)
    public void usersUserIdGetTestFailsIfAccessTokenIsInvalid() throws ApiException {
        Integer userId = 345247525;
        String accessToken = "123ABC";
        UserResponse response = api.usersUserIdGet(userId, accessToken);
        assertNotNull(response);
        assertEquals(userId, response.getId());
    }

    //------------ My Test --------------------------------------------//
    
    @Test(expected = ApiException.class)  
    public void CreateTestUserFailsIfAccessTokenAndsite_idAreInvalid() throws ApiException {
        String site_id = "MLU";
        String accessToken = "APP_USR-6727534428095949-083100-770e7e6852d1ce97cee026462670ce7a-628132477";
        UserTestResponse response = api.CreateTestUser(site_id, accessToken);
        assertNotNull(response);
        assertEquals("active", response.getSite_status());
    }
}